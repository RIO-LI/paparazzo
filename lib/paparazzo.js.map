{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d1fd7b7aa3dbaaa3dd1b","webpack:///./src/paparazzo.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"paparazzo.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d1fd7b7aa3dbaaa3dd1b","// 事件处理器类型\ntype EventHandler = (payload?: any) => void;\n\n// 事件哈希集合类型\ninterface EventsMap {\n    [propName: string]: EventHandler[] | EventHandler;\n}\n\n// Paparazzo实例对象配置类型\ninterface Config {\n    separator?: string; // 事件名分隔符\n    [propName: string]: any;\n}\n\n/**\n * 判断一个目标是否为对象类型\n * @param target 需要检测的目标对象\n * @returns boolean true表示是对象类型，false表示不是对象类型\n */\nconst isObject = (target: any): boolean => {\n    return typeof target === 'object' && target != null;\n};\n\n/**\n * 判断一个目标是否为函数类型\n * @param target 需要检测的目标对象\n * @returns boolean true表示是函数类型，false表示函数对象类型\n */\nconst isFunction = (target: any): boolean => {\n    return typeof target === 'function';\n};\n\nlet guid = 0;\n\nexport class Paparazzo {\n\n    // 存储事件处理器集合或事件处理器与事件名的map集合，\n    // key为事件名，value为事件处理器集合或事件处理器\n    private eventsMap: EventsMap = {};\n\n    private handlerGuidsMap: { [propName: string]: any } = {};\n\n    // 配置对象\n    private config: Config = {\n        separator: ' ', // 事件名分隔符\n    };\n\n    constructor(config?: Config) {\n        if (isObject(config)) {\n            this.config = (Object as any).assign(this.config, config);\n        }\n    }\n\n    /**\n     * 根据事件名风格符对事件名字符串进行切割，默认风格符为空格\n     * @param eventName 事件名\n     */\n    private splitEventNames(eventName: string): string[] {\n        const names: string[] = eventName.split(this.config.separator ? this.config.separator : ' ');\n        names.filter((name: string) => {\n            return (name.trim()).length > 0;\n        });\n        return names;\n    }\n\n    /**\n     * 为指定事件添加处理器\n     * @param eventName  事件名\n     * @param handler 事件处理器或处理器集合\n     * @param once 是否只监听一次，true 表示是，false表示不是，默认为false\n     * @param prepend 是否将处理器添加到该事件处理器队列的最前方，true 表示是，false表示不是，默认为false\n     */\n    private addEventHandlers(eventName: string, handler: EventHandler[] | EventHandler, once?: boolean, prepend?: boolean): Paparazzo {\n        if (!eventName) {\n            return this;\n        }\n        this.splitEventNames(eventName)\n            .forEach((name: string) => {\n                if (!this.eventsMap[name]) {\n                    this.eventsMap[name] = [];\n                }\n                let handlers: EventHandler[] = [];\n                if (!Array.isArray(handler)) {\n                    handlers = [handler];\n                } else {\n                    handlers = handler;\n                }\n                handlers = handlers.filter(fn => isFunction(fn));\n                if (once) {\n                    handlers = handlers.map((fn) => {\n                        const onceFn = (...args: any[]) => {\n                            fn(...args);\n                            this.off(name, fn);\n                        };\n                        this.handlerGuidsMap[`${++guid}`] = onceFn;\n                        (fn as any)['_guid'] = `${guid}`;\n                        return onceFn;\n                    });\n                }\n                if (prepend) {\n                    this.eventsMap[name] = (handlers || []).concat(this.eventsMap[name] || []);\n                } else {\n                    this.eventsMap[name] = ((this.eventsMap[name] || []) as EventHandler[]).concat(handlers);\n                }\n            });\n        return this;\n    }\n\n    /**\n     * 对事件的处理器进行迭代处理\n     * @param eventName 事件名,如果需要对多个事件进行监听，可以用事件分隔符隔开，默认为空格\n     * @param process 迭代处理\n     * @param args 迭代处理器的入参\n     */\n    private processEvents(eventName: string, process: any, ...args: any[]): Paparazzo {\n        this.splitEventNames(eventName)\n            .forEach((name: string) => {\n                (this.eventsMap[name] as EventHandler[] || []).forEach((handler: EventHandler) => {\n                    process(name, handler, ...args);\n                });\n            });\n        return this;\n    }\n\n    /**\n     * 对事件进行监听\n     * @param eventName 事件名,如果需要对多个事件进行监听，可以用事件分隔符隔开，默认为空格\n     * @param handlers 事件处理器或事件处理器集合\n     * @param once 是否只监听一次,true 表示是，false表示不是\n     * @param prepend 是否将处理器添加到该事件处理器队列的最前方，true 表示是，false表示不是，默认为false\n     */\n    public on(eventName: string, handlers: EventHandler[] | EventHandler, once?: boolean, prepend?: boolean): Paparazzo;\n\n    /**\n     * 对事件集合进行监听\n     * @param eventHandlersMap 事件集合对象，键为要监听的事件名，值为对应事件处理器\n     * @param once 是否只监听一次,true 表示是，false表示不是\n     * @param prepend 是否将处理器添加到该事件处理器队列的最前方，true 表示是，false表示不是，默认为false\n     */\n    public on(eventHandlersMap: EventsMap, once?: boolean, prepend?: boolean): Paparazzo;\n\n    /**\n     * 对指定事件进行监听\n     */\n    public on(...args: any[]): Paparazzo {\n        if (isObject(args[0])) {\n            const eventsMap: EventsMap = args[0];\n            const once: boolean = !!args[1];\n            const prepend: boolean = !!args[2];\n            Object.keys(eventsMap).forEach((eventName: string) => {\n                this.addEventHandlers(eventName, eventsMap[eventName], once, prepend);\n            });\n        } else {\n            const eventNames: string = args[0];\n            const handlers: EventHandler[] | EventHandler = args[1];\n            const once: boolean = !!args[2];\n            const prepend: boolean = !!args[3];\n            this.addEventHandlers(eventNames, handlers, once, prepend);\n        }\n        return this;\n    }\n\n    /**\n     * 对事件进行监听，并将处理器添加到该事件处理器队列的最前方\n     * @param eventName 事件名,如果需要对多个事件进行监听，可以用事件分隔符隔开，默认为空格\n     * @param handlers 事件处理器或事件处理器集合\n     * @param once 是否只监听一次\n     */\n    public prependListener(eventName: string, handlers: EventHandler[] | EventHandler, once?: boolean): Paparazzo;\n\n    /**\n     * 对事件进行监听，并将处理器添加到该事件处理器队列的最前方\n     * @param eventHandlersMap 事件集合对象，键为要监听的事件名，值为对应事件处理器\n     * @param once 是否只监听一次\n     */\n    public prependListener(eventHandlersMap: EventsMap, once?: boolean): Paparazzo;\n\n    /**\n     * 对事件进行监听，并将处理器添加到该事件处理器队列的最前方\n     */\n    public prependListener(...args: any[]): Paparazzo {\n        this.on.call(this, args[0], args[1], args[2], true);\n        return this;\n    }\n\n    /**\n     * 对事件进行一次性监听，并将处理器添加到该事件处理器队列的最前方\n     * @param eventName 事件名,如果需要对多个事件进行监听，可以用事件分隔符隔开，默认为空格\n     * @param handlers 事件处理器或事件处理器集合\n     */\n    public prependOnceListener(eventName: string, handlers: EventHandler[] | EventHandler): Paparazzo;\n\n    /**\n     * 对事件进行一次性监听，并将处理器添加到该事件处理器队列的最前方\n     * @param eventHandlersMap 事件集合对象，键为要监听的事件名，值为对应事件处理器\n     */\n    public prependOnceListener(eventHandlersMap: EventsMap): Paparazzo;\n\n    /**\n     * 对事件进行一次性监听，并将处理器添加到该事件处理器队列的最前方\n     */\n    public prependOnceListener(...args: any[]): Paparazzo {\n        return this.prependListener.call(this, args[0], args[1], true, true);\n    }\n\n    /**\n     * 对事件进行监听\n     * @param eventName 事件名,如果需要对多个事件进行监听，可以用事件分隔符隔开，默认为空格\n     * @param handlers 事件处理器或事件处理器集合\n     */\n    public once(eventName: string, handlers: EventHandler[] | EventHandler): Paparazzo;\n\n    /**\n     * 对事件集合进行监听\n     * @param eventHandlersMap 事件集合对象，键为要监听的事件名，值为对应事件处理器\n     */\n    public once(eventHandlersMap: EventsMap): Paparazzo;\n\n    /**\n     * 对指定事件进行一次性监听，当事件触发后，事件将从事件处理中移除\n     */\n    public once(...args: any[]): Paparazzo {\n        this.on.call(this, args[0], args[1], true, false);\n        return this;\n    }\n\n    /**\n     * 触发指定事件并发送相关数据\n     * @param eventName 事件名，如果需要对多个事件进行触发时，可以用事件分隔符隔开，默认为空格\n     * @param payload 事件需要处理的数据\n     */\n    public emmiter(eventName: string, payload?: any): Paparazzo {\n        return this.processEvents(eventName, (name: string, handler: EventHandler, payload: any) => {\n            handler(payload);\n        }, payload);\n    }\n\n    /**\n     * 对指定事件进行移除\n     * @param eventName 事件名，如果需要对多个事件名进行触发时，可以用事件分隔符隔开，默认为空格\n     * @param handler 需要移除的处理器集合或处理器\n     */\n    public off(eventName: string, handler?: EventHandler[] | EventHandler): Paparazzo {\n        let eventsMap: EventHandler[] = this.eventsMap[eventName] as EventHandler[];\n        if (!handler) {\n            this.splitEventNames(eventName).forEach((name: string) => {\n                delete this.eventsMap[name];\n            });\n        } else {\n            const targetHandlers = Array.isArray(handler) ? handler : [handler];\n            this.splitEventNames(eventName).forEach((name: string) => {\n                targetHandlers.forEach((targetHandler) => {\n                    const guid = (targetHandler as any)['_guid'];\n                    const originFn = this.handlerGuidsMap[guid];\n                    const index = eventsMap.indexOf(originFn ? originFn : targetHandler);\n                    if (index > -1) {\n                        this.eventsMap[name] = eventsMap = eventsMap.slice(0, index).concat(eventsMap.slice(index + 1));\n                        delete this.handlerGuidsMap[guid];\n                    }\n                });\n            });\n        }\n        return this;\n    }\n\n    /**\n     * 获取全部监听的事件名\n     */\n    public eventNames(): string[] {\n        return Object.keys(this.eventsMap);\n    }\n\n    /**\n     * 获取指定事件名的处理器集合\n     * @param eventName 事件名\n     */\n    public listeners(eventName: string): EventHandler[] {\n        return this.eventsMap[eventName] as EventHandler[] || [];\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader??ref--1!./src/paparazzo.ts","export { Paparazzo } from './paparazzo';\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader??ref--1!./src/index.ts"],"sourceRoot":""}